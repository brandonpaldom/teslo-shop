generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String          @id @default(uuid())
  name        String
  price       Decimal         @default(0) @db.Decimal(10, 2)
  images      ProductImage[]
  description String
  stock       Int
  slug        String          @unique
  tags        String[]        @default([])
  size        ProductSize[]   @default([])
  gender      ProductGender
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  OrderItem   OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

enum ProductSize {
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ProductGender {
  men
  women
  kids
}

enum UserRole {
  admin
  user
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(user)
  image         String?
  Address       Address?
  Order         Order[]
}

model Country {
  id           String         @id
  name         String
  Address      Address[]
  OrderAddress OrderAddress[]
}

model Address {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  apartment String?
  zipCode   String
  city      String
  state     String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  phone     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Order {
  id           String        @id @default(uuid())
  totalItems   Int
  subtotal     Decimal       @default(0) @db.Decimal(10, 2)
  salesTax     Decimal       @default(0) @db.Decimal(10, 2)
  totalDue     Decimal       @default(0) @db.Decimal(10, 2)
  isPaid       Boolean       @default(false)
  paidAt       DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id        String      @id @default(uuid())
  quantity  Int
  price     Decimal     @db.Decimal(10, 2)
  size      ProductSize
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product     @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  apartment String?
  zipCode   String
  city      String
  state     String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  phone     String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @unique
}
