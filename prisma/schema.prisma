generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String          @id @default(uuid())
  name        String
  price       Decimal         @default(0) @db.Decimal(10, 2)
  description String
  stock       Int
  slug        String          @unique
  tags        String[]        @default([])
  size        ProductSize[]   @default([])
  gender      ProductGender
  categoryId  String
  OrderItem   OrderItem[]
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  images      ProductImage[]

  @@index([gender])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(user)
  image         String?
  Address       Address?
  Order         Order[]
}

model Country {
  id           String         @id
  name         String
  Address      Address[]
  OrderAddress OrderAddress[]
}

model Address {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  apartment String?
  zipCode   String
  city      String
  state     String
  countryId String
  phone     String
  userId    String  @unique
  country   Country @relation(fields: [countryId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  totalItems    Int
  subtotal      Decimal       @default(0) @db.Decimal(10, 2)
  salesTax      Decimal       @default(0) @db.Decimal(10, 2)
  totalDue      Decimal       @default(0) @db.Decimal(10, 2)
  isPaid        Boolean       @default(false)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  transactionId String?       @unique
  user          User          @relation(fields: [userId], references: [id])
  OrderAddress  OrderAddress?
  OrderItem     OrderItem[]
}

model OrderItem {
  id        String      @id @default(uuid())
  quantity  Int
  price     Decimal     @db.Decimal(10, 2)
  size      ProductSize
  orderId   String
  productId String
  order     Order       @relation(fields: [orderId], references: [id])
  product   Product     @relation(fields: [productId], references: [id])
}

model OrderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  apartment String?
  zipCode   String
  city      String
  state     String
  countryId String
  phone     String
  orderId   String  @unique
  country   Country @relation(fields: [countryId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

enum ProductSize {
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ProductGender {
  men
  women
  kids
}

enum UserRole {
  admin
  user
}
